continue
starting.downto(ending).map { |number| verse(number).to_s }.join("\n")
      "Go to the store and buy some more, 99 bottles of beer on the wall.\n"
      "No more bottles of beer on the wall, no more bottles of beer.\n" \
      "\n" \
      "Take it down and pass it around, no more bottles of beer on the wall.\n" \
      "1 bottle of beer on the wall, 1 bottle of beer.\n" \
      "\n" \
      "Take one down and pass it around, 1 bottle of beer on the wall.\n" \
"2 bottles of beer on the wall, 2 bottles of beer.\n" \
expected
      "Go to the store and buy some more, 99 bottles of beer on the wall.\n"
      "No more bottles of beer on the wall, no more bottles of beer.\n" \
      "\n" \
      "Take it down and pass it around, no more bottles of beer on the wall.\n" \
      "1 bottle of beer on the wall, 1 bottle of beer.\n" \
      "\n" \
      "Take one down and pass it around, 1 bottle of beer on the wall.\n" \
expected = "2 bottles of beer on the wall, 2 bottles of beer.\n" \
expected
      "Go to the store and buy some more, 99 bottles of beer on the wall.\n"
      "No more bottles of beer on the wall, no more bottles of beer.\n" \
      "\n" \
      "Take it down and pass it around, no more bottles of beer on the wall.\n" \
      "1 bottle of beer on the wall, 1 bottle of beer.\n" \
      "\n" \
      "Take one down and pass it around, 1 bottle of beer on the wall.\n" \
expected = "2 bottles of beer on the wall, 2 bottles of beer.\n" \
starting.downto(ending).map { |number| verse(number).to_s }.join("\n")
ending
starting
starting.downto(ending).map do |number| 
    end
      verse(number).to_s
      # byebug
starting.downto(ending).map do |number| 
continue
 verse(number).to_s
continue
verse(number).to_s
number
continue
second
first
for i in first..second
i
continue
(first..second).each do |i|
end
puts "#{i}"
end
puts i
(first..second).each do |i|
o
i
first..second
second
first
continue
i
first..second
first
continue
no
